[{"path":"https://tilburgnetworkgroup.github.io/remify/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 remify authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/rehshape.html","id":"aim","dir":"Articles","previous_headings":"","what":"Aim","title":"Transform processed relational event sequences to different formats","text":"remify::rehshape() transforms remify object another object structure suitable external packages. function can return data inputs required functions: relevent::rem() relevent::rem.dyad() functions available inside relevent package (Butts C., 2023).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/rehshape.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Transform processed relational event sequences to different formats","text":"input arguments remify::rehshape() : data, processed relational event history (S3 object class remify) output_format, character value indicates output format input data converted. argument can assume two values: \"relevent-rem\" , \"relevent-rem.dyad\" (default \"relevent-rem\") ncores, number threads used parallelize internal routines (default 1L) optional_arguments, vector arguments names relevent::rem relevent::rem.dyad() user might want process output object rehshape (e.g., pre-computed structures required relevent::rem.dyad(), acl, cumideg, etc.) - feature available future version remify -","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/rehshape.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Transform processed relational event sequences to different formats","text":"output structure function different according chosen output_format: eventlist, matrix two columns: observed dyads first column, vector time second column supplist, logical matrix dimensions [rows = number events, columns = number dyads]. matrix indicates time point (row) whether dyad risk (TRUE), (FALSE) timing, character can assume two values: \"interval\" (uses inter-event time model), \"ordinal\" (considers event order model) edgelist, matrix three columns: time (order) events first column, sender receiver relational event, respectively, second third column n, number actors relational event network (senders receivers) ordinal, logical (TRUE/FALSE) value indicates whether likelihood ‘ordinal’ (TRUE) ‘interval’ (FALSE)","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/rehshape.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"Transform processed relational event sequences to different formats","text":"explain usage function remify::rehshape(), consider example edgelist available data randomREH. First, process edgelist remify::remify(). , can transform remify object possible output formats: remify relevent-rem: remify relevent-rem.dyad:","code":"library(remify) data(randomREH)  reh_remify <- remify::remify(edgelist = randomREH$edgelist, model = \"tie\") reh_remify ## Relational Event Network ## (processed for tie-oriented modeling): ##  > events = 9915 ##  > actors = 20 ##  > (event) types = 3 ##  > riskset = full ##  > directed = TRUE ##  > ordinal = FALSE ##  > weighted = FALSE ##  > time length ~ 80 days ##  > interevent time  ##       >> minimum ~ 0.0011 seconds ##       >> maximum ~ 5811.4011 seconds reh_rem <- remify::rehshape(data = reh_remify,                        output_format = c(\"relevent-rem\")) names(reh_rem) ## [1] \"eventlist\" \"supplist\"  \"timing\" reh_rem.dyad <- remify::rehshape(data = reh_remify,                        output_format = c(\"relevent-rem.dyad\")) names(reh_rem.dyad) ## [1] \"edgelist\" \"n\"        \"ordinal\""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"aim","dir":"Articles","previous_headings":"","what":"Aim","title":"Process a Relational Event History","text":"objective remify::remify() process raw relational event sequences supplied user along inputs characterize data (actors’ names, event types’ names, starting time point event sequence, set interactions excluded risk set specific time points, etc.). internal routines process structure input event sequence new one, providing also objects used packages ‘remverse’. example, use data randomREH (documentation available via ?randomREH).","code":"library(remify) # loading library data(randomREH) # loading data names(randomREH) # objects inside the list 'randomREH' ## [1] \"edgelist\"  \"actors\"    \"types\"     \"origin\"    \"omit_dyad\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Process a Relational Event History","text":"Input arguments can supplied remify() : edgelist,directed, ordinal,model, actors, types, riskset, origin, omit_dyad ncores.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"edgelist","dir":"Articles","previous_headings":"Input","what":"edgelist","title":"Process a Relational Event History","text":"edgelist must data.frame three mandatory columns: time interaction first column, two actors forming dyad second third column. naming first three columns required order must [time,actor1,actor2]. directed networks, second column edgelist column sender third column one receiver. undirected network, order second third column ignored. Optional columns can supplied type weight named accordingly. However, type weight must defined third column.","code":"head(randomREH$edgelist) ##                  time    actor1  actor2        type ## 1 2020-03-05 01:47:08     Kayla Kiffani competition ## 2 2020-03-05 01:50:18    Colton  Justin    conflict ## 3 2020-03-05 02:30:26    Kelsey    Maya cooperation ## 4 2020-03-05 02:38:50 Alexander  Colton competition ## 5 2020-03-05 02:56:16     Wyatt  Kelsey    conflict ## 6 2020-03-05 03:06:45     Derek Breanna competition"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"directed","dir":"Articles","previous_headings":"Input","what":"directed","title":"Process a Relational Event History","text":"logical TRUE/FALSE value, indicating whether events directed (TRUE) (FALSE). FALSE, dyads sorted according names following alphanumeric order (e.g. [actor1,actor2] = [\"Colton\",\"Alexander\"] become [actor1,actor2] = [\"Alexander\",\"Colton\"]).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"ordinal","dir":"Articles","previous_headings":"Input","what":"ordinal","title":"Process a Relational Event History","text":"logical TRUE/FALSE value, indicating whether order events matters model (TRUE) also waiting times event must taken account (FALSE). Based value argument, processing time variable carried differently remstimate package use either ordinal (ordinal TRUE) interval (ordinal FALSE) time likelihood.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"model","dir":"Articles","previous_headings":"Input","what":"model","title":"Process a Relational Event History","text":"Whether model interest tie-oriented actor-oriented, argument model can specified either \"tie\" \"actor\". argument affects structure output risk set: case actor-oriented model changing risk set, processed risk set consist two objects, senders’ dyads’ risk sets, tie-oriented modeling, output risk set consist riskset dyads. dynamic risk set defined (omit_dyad = NULL), argument model won’t affect processing event sequence.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"actors","dir":"Articles","previous_headings":"Input","what":"actors","title":"Process a Relational Event History","text":"vector actor names (left unspecified, names taken input edgelist). data type can either numeric character. randomREH data, vector actor names provided. argument useful especially user wants include actors interact study didn’t actually take part interaction. Therefore, including names via argument actors exclude risk set.","code":"randomREH$actors ##  [1] \"Crystal\"   \"Colton\"    \"Lexy\"      \"Kelsey\"    \"Michaela\"  \"Zackary\"   ##  [7] \"Richard\"   \"Maya\"      \"Wyatt\"     \"Kiffani\"   \"Alexander\" \"Kayla\"     ## [13] \"Derek\"     \"Justin\"    \"Andrey\"    \"Francesca\" \"Megan\"     \"Mckenna\"   ## [19] \"Charles\"   \"Breanna\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"types","dir":"Articles","previous_headings":"Input","what":"types","title":"Process a Relational Event History","text":"vector type names (left unspecified, names taken input edgelist). data type can either numeric character. randomREH data vector types provided.","code":"randomREH$types ## [1] \"conflict\"    \"competition\" \"cooperation\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"riskset","dir":"Articles","previous_headings":"Input","what":"riskset","title":"Process a Relational Event History","text":"riskset argument specifies type risk set used input data. can assume three different values: \"full\", \"active\" \"manual\" (\"full\" default value). risk set \"full\", possible dyadic interactions given number actors network considered risk throughout event sequence. risk set \"active\", made observed dyadic interactions assumed dyads risk entire event sequence. Finally, risk set \"manual\", time-varying structure, , one actors excluded network specific time point join network later, vice versa, one actors excluded risk set time point leave network end sequence. words, manual risk set defined whenever one dyadic interactions occur one timespans. riskset argument \"manual\", user supply list object risk set modifications omit_dyad argument. details risk set definitions provided vignette(topic = \"riskset\", package = \"remify\").","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"origin","dir":"Articles","previous_headings":"Input","what":"origin","title":"Process a Relational Event History","text":"initial time (\\(t_0\\)) event sequence time network actors starts observed event occurring time point annotated. information always known depends study design. \\(t_0\\) event sequence known, can specified argument origin must class time column input edgelist. argument left unspecified (NULL), set default one time unit earlier \\(t_1\\) (time first observed event). instance, waiting time measured seconds \\(t_0 = t_1 - 1sec\\) , waiting time measured days \\(t_0 = t_1 - 1day\\) forth. randomREH data \\(t_0\\) provided.","code":"randomREH$origin ## [1] \"2020-03-05 01:32:53 UTC\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"omit_dyad","dir":"Articles","previous_headings":"Input","what":"omit_dyad","title":"Process a Relational Event History","text":"argument required riskset=\"manual\", therefore one dyads must omitted risk set specific time windows (e.g. actor drops network, specific groups actors interact anymore starting time point). omit_dyad input list lists. list refers one risk set modification must two objects: data.frame called dyad, dyads remove specified row format actor1, actor2, type, time vector two values defining first last time point time window dyads couldn’t occur. Consider example randomREH data. instance, want modify (shrink) risk set according two changes apply different time intervals: event type conflict observed since specific time point end observation period. two actors Michaela Zackary interact anybody else specific time point last observed time point. object dyad give instructions function remove risk set indicated time windows events : (1) type conflict, (2) Michaela `Zackary senders receivers relational event. <NA> values mean actors/types considered field. Indeed, first change needed remove events conflict type, leaving actor1 actor2 unspecified <NA>. Therefore, every time one field among (actor1,actor2,type) left undefined, omission risk set applies possible values field. Furthermore, internal routines remify::remify(), given dyads specified via omit_dyad input, always operate shrinkage risk set starting “full” risk set (possible dyads given number actors information directed/undirected events). Therefore, dyads described omit_dyad list must based observed set actors (actors event sequence) input vector actors (supplied via argument actors). user wants add set actors risk set specific timespan, can done : first making sure names actors found either input edgelist specified input actors, user can define omit_dyad object specifies time window(s) set actors risk, risk desired time window.","code":"randomREH$omit_dyad[[1]]$time # start and stop time point defining the time window of interest ## [1] \"2020-05-07 20:42:38 UTC\" \"2020-05-23 21:46:41 UTC\" randomREH$omit_dyad[[1]]$dyad # dyads to be removed from the time points defined by the interval in `time` ##   actor1 actor2     type ## 1     NA     NA conflict randomREH$omit_dyad[[2]]$time # start and stop time point defining the time window of interest ## [1] \"2020-05-19 23:30:09 UTC\" \"2020-05-23 21:46:41 UTC\" randomREH$omit_dyad[[2]]$dyad # dyads to be removed from the time points defined by the interval in `time` ##     actor1   actor2 type ## 1 Michaela     <NA>   NA ## 2     <NA> Michaela   NA ## 3  Zackary     <NA>   NA ## 4     <NA>  Zackary   NA"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"running-the-example","dir":"Articles","previous_headings":"Input","what":"Running the example","title":"Process a Relational Event History","text":"","code":"edgelist_reh <- remify(edgelist = randomREH$edgelist,                     directed = TRUE, # events are directed                     ordinal = FALSE, # model with waiting times                     model = \"tie\", # tie-oriented modeling                     actors = randomREH$actors,                     types = randomREH$types,                      riskset = \"manual\",                     origin = randomREH$origin,                     omit_dyad = randomREH$omit_dyad)"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Process a Relational Event History","text":"output remify() S3 object class remify contains following elements:","code":"names(edgelist_reh) ## [1] \"M\"              \"N\"              \"C\"              \"D\"              ## [5] \"intereventTime\" \"edgelist\"       \"omit_dyad\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"m","dir":"Articles","previous_headings":"Output","what":"M","title":"Process a Relational Event History","text":"M number observed time points. events occurring time point, M count number unique time points number events returned E (see ). events occurred different time points, M correspond also number events E defined.","code":"edgelist_reh$M ## [1] 9915"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"e","dir":"Articles","previous_headings":"Output","what":"E","title":"Process a Relational Event History","text":"E number observed events. remify() returns number observed events events occurred time point. observed events occurred different time points, remify() return E.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"n","dir":"Articles","previous_headings":"Output","what":"N","title":"Process a Relational Event History","text":"N total number actors interact network.","code":"edgelist_reh$N ## [1] 20"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"c","dir":"Articles","previous_headings":"Output","what":"C","title":"Process a Relational Event History","text":"C number event types (also referred sentiment event) observed network. event types present network one event type defined, output object C NULL.","code":"edgelist_reh$C ## [1] 3"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"d-and-actived","dir":"Articles","previous_headings":"Output","what":"D and activeD","title":"Process a Relational Event History","text":"D number possible dyads considering number actors also number event types (measured). represents largest size risk set (full risk set size). number dyads D can change based whether relational events directed undirected: * network directed, \\(D = N*(N-1)*C\\); * network undirected, \\(D = (N*(N-1)/2)*C\\). input argument riskset \"active\", output object also number activeD, size active risk set (active dyads observed event history).","code":"edgelist_reh$D ## [1] 1140"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"intereventtime","dir":"Articles","previous_headings":"Output","what":"intereventTime","title":"Process a Relational Event History","text":"intereventTime numeric vector waiting times two subsequent events, : \\[\\begin{bmatrix} t_1 - t_0 \\\\ t_2 - t_1 \\\\ \\cdots \\\\ t_M - t_{M-1} \\end{bmatrix}\\] vector waiting times available sequence processed interval likelihood (ordinal = FALSE). case ordinal likelihood, intereventTime NULL.","code":"head(edgelist_reh$intereventTime) ## [1]  854.6961  189.9698 2408.3461  504.0680 1046.0560  628.0785"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"edgelist-1","dir":"Articles","previous_headings":"Output","what":"edgelist","title":"Process a Relational Event History","text":"edgelist data.frame consists original input edgelist, columns [time,actor1,actor2,type,weight] events -row re-ordered time variable input edgelist correctly sorted. type weight supplied input, output edgelist incude columns.","code":"head(edgelist_reh$edgelist) ##                  time    actor1  actor2        type ## 1 2020-03-05 01:47:08     Kayla Kiffani competition ## 2 2020-03-05 01:50:18    Colton  Justin    conflict ## 3 2020-03-05 02:30:26    Kelsey    Maya cooperation ## 4 2020-03-05 02:38:50 Alexander  Colton competition ## 5 2020-03-05 02:56:16     Wyatt  Kelsey    conflict ## 6 2020-03-05 03:06:45     Derek Breanna competition"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"omit_dyad-1","dir":"Articles","previous_headings":"Output","what":"omit_dyad","title":"Process a Relational Event History","text":"riskset = \"manual\", omit_dyad must supplied processing function, output object contain processed list name. case tie-oriented modeling, list consists two objects: vector named time matrix named riskset. riskset 1/0’s matrix possible risk set modifications described row, columns identify dyads (\\(D\\) columns). number rows depends number risk set modifications occurring event sequence, thus remains variable (necessarly number risk set modifications declared input omit_dyad, can also occur /partially/totally overlapping time windows processed internally). time vector row indices time point indicates modification risk set (row index matrix riskset) observed. processed object omit_dyad (inside remify object) required packages ‘remverse’. Given packages function written C++, row indices vector start 0 (indicating row 1 matrix ) assume value -1 risk set alteration observed. case actor-oriented modeling changing risk set, omit_dyad output list consists three objects: vector named time (vector explained ) two risk set matrices (senderRiskset riskset), one sender one dyads. risk set matrices follow structure matrix riskset tie-oriented modeling. Whenever omit_dyad supplied remify() output remify object empty.","code":"edgelist_reh$omit_dyad$riskset[,1:10] # printing out the risk set modifications of only the first 10 columns (dyads). A total number of 2 modifications of the risk set are observed (by row) ##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,]    1    1    1    1    1    1    1    1    1     1 ## [2,]    1    1    1    1    1    1    1    1    1     1 edgelist_reh$omit_dyad$time[1:10] # printing out the first 10 time points. We can see that in none of the 10 time points any modification takes place (-1) ##  [1] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"attributes","dir":"Articles","previous_headings":"","what":"Attributes","title":"Process a Relational Event History","text":"Consider now \"active\" risk set process edgelist: attributes remify object :","code":"edgelist_reh <- remify(edgelist = randomREH$edgelist,                     directed = TRUE, # events are directed                     ordinal = FALSE, # model with waiting times                     model = \"tie\", # tie-oriented modeling                     actors = randomREH$actors,                     types = randomREH$types,                      riskset = \"active\",                     origin = randomREH$origin) names(attributes(edgelist_reh)) ##  [1] \"names\"        \"class\"        \"with_type\"    \"weighted\"     \"directed\"     ##  [6] \"ordinal\"      \"model\"        \"riskset\"      \"dictionary\"   \"origin\"       ## [11] \"ncores\"       \"dyadID\"       \"actor1ID\"     \"actor2ID\"     \"typeID\"       ## [16] \"dyadIDactive\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"names","dir":"Articles","previous_headings":"Attributes","what":"names","title":"Process a Relational Event History","text":"names vector names output objects discussed already section ‘Output’.","code":"attr(edgelist_reh, \"names\") ## [1] \"M\"              \"N\"              \"C\"              \"D\"              ## [5] \"intereventTime\" \"edgelist\"       \"activeD\"        \"omit_dyad\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"class","dir":"Articles","previous_headings":"Attributes","what":"class","title":"Process a Relational Event History","text":"class attribute returns class name object, remify.","code":"attr(edgelist_reh, \"class\") ## [1] \"remify\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"with_type","dir":"Articles","previous_headings":"Attributes","what":"with_type","title":"Process a Relational Event History","text":"with_type logical TRUE/FALSE value indicating whether one event type observed network (TRUE) (FALSE).","code":"attr(edgelist_reh, \"with_type\") ## [1] TRUE"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"weighted","dir":"Articles","previous_headings":"Attributes","what":"weighted","title":"Process a Relational Event History","text":"weighted logical TRUE/FALSE value indicating whether relational events weights (TRUE) (FALSE).","code":"attr(edgelist_reh, \"weighted\") ## [1] FALSE"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"directed-1","dir":"Articles","previous_headings":"Attributes","what":"directed","title":"Process a Relational Event History","text":"directed logical TRUE/FALSE value indicating whether know (TRUE) event originated action (sender) target (receiver) , don’t know (FALSE) source target event actors involved .","code":"attr(edgelist_reh, \"directed\") ## [1] TRUE"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"ordinal-1","dir":"Articles","previous_headings":"Attributes","what":"ordinal","title":"Process a Relational Event History","text":"ordinal logical TRUE/FALSE value indicating whether model want consider waiting times events (FALSE) consider order relational events (TRUE).","code":"attr(edgelist_reh, \"ordinal\") ## [1] FALSE"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"model-1","dir":"Articles","previous_headings":"Attributes","what":"model","title":"Process a Relational Event History","text":"model describes whether output remify() suitable actor-oriented model (model = \"actor\") tie-oriented model (model = \"tie\").","code":"attr(edgelist_reh, \"model\") ## [1] \"tie\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"riskset-1","dir":"Articles","previous_headings":"Attributes","what":"riskset","title":"Process a Relational Event History","text":"riskset returns type risk set chosen processing data. Possible values : \"full\", \"manual\" \"active\".","code":"attr(edgelist_reh, \"riskset\") ## [1] \"active\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"dictionary","dir":"Articles","previous_headings":"Attributes","what":"dictionary","title":"Process a Relational Event History","text":"dictionary list two data.frame’s: actors types. actors two columns: first actor names (actorName) sorted according alphanumerical order, second corresponding ID’s (actorID), ranging \\(1\\) \\(N\\) (\\(N\\) number actors); types two columns: first type names (typeName) sorted according alphanumerical order, second corresponding ID’s (typeID), ranging \\(1\\) \\(C\\) (\\(C\\) number event types); details ID assigned actors types, see utils::vignette(topic = \"riskset\", package = \"remify\")","code":"attr(edgelist_reh, \"dictionary\") ## $actors ##    actorName actorID ## 1  Alexander       1 ## 2     Andrey       2 ## 3    Breanna       3 ## 4    Charles       4 ## 5     Colton       5 ## 6    Crystal       6 ## 7      Derek       7 ## 8  Francesca       8 ## 9     Justin       9 ## 10     Kayla      10 ## 11    Kelsey      11 ## 12   Kiffani      12 ## 13      Lexy      13 ## 14      Maya      14 ## 15   Mckenna      15 ## 16     Megan      16 ## 17  Michaela      17 ## 18   Richard      18 ## 19     Wyatt      19 ## 20   Zackary      20 ##  ## $types ##      typeName typeID ## 1 competition      1 ## 2    conflict      2 ## 3 cooperation      3"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"origin-1","dir":"Articles","previous_headings":"Attributes","what":"origin","title":"Process a Relational Event History","text":"origin value input argument name.","code":"str(attr(edgelist_reh, \"origin\")) # printing out only the str() of the attribute since the data.frame `value` is large ##  POSIXct[1:1], format: \"2020-03-05 01:32:53\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"ncores","dir":"Articles","previous_headings":"Attributes","what":"ncores","title":"Process a Relational Event History","text":"ncores number threads used parallelization internal routines remify::remify().","code":"attr(edgelist_reh, \"ncores\") ## [1] 1"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"dyadid","dir":"Articles","previous_headings":"Attributes","what":"dyadID","title":"Process a Relational Event History","text":"dyadID list vectors containing IDs observed dyads per time point. IDs range 1 D (edgelist_reh$D). details ID assigned specific triple [actor1,actor2,type], see vignette(topic = \"riskset\", package = \"remify\").","code":"attr(edgelist_reh, \"dyadID\")[[1]] # printing out dyads ID's observed at the first time point ## [1] 182"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"actor1id","dir":"Articles","previous_headings":"Attributes","what":"actor1ID","title":"Process a Relational Event History","text":"actor1ID list vectors containing IDs observed actor1’s/senders per time point. IDs range 1 N (edgelist_reh$N).","code":"attr(edgelist_reh, \"actor1ID\")[[1]] # printing out the actor1's/senders ID's observed at the first time point ## [1] 10"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"actor2id","dir":"Articles","previous_headings":"Attributes","what":"actor2ID","title":"Process a Relational Event History","text":"actor2ID list vectors containing IDs observed actor2’s/receivers per time point. IDs range 1 N (edgelist_reh$N).","code":"attr(edgelist_reh, \"actor2ID\")[[1]] # printing out the actor2's/receivers ID's observed at the first time point ## [1] 12"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"typeid","dir":"Articles","previous_headings":"Attributes","what":"typeID","title":"Process a Relational Event History","text":"typeID list vectors containing IDs observed types per time point. IDs range 1 C (edgelist_reh$C).","code":"attr(edgelist_reh, \"typeID\")[[1]] # printing out the types ID's observed at the first time point ## [1] 1"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"dyadidactive","dir":"Articles","previous_headings":"Attributes","what":"dyadIDactive","title":"Process a Relational Event History","text":"dyadIDactive list vectors containing IDs active set dyads. attribute available riskset = \"active\".","code":"attr(edgelist_reh, \"dyadIDactive\")[[1]] # printing out the ID's of the active dyads at the first time point ## [1] 182"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"evenly_spaced_interevent_time-and-indices_simultaneous_events","dir":"Articles","previous_headings":"Attributes","what":"evenly_spaced_interevent_time and indices_simultaneous_events","title":"Process a Relational Event History","text":"evenly_spaced_interevent_time vector processed waiting times relational event sequence two events observed time point. attribute NULL simultaneous events sequence. evenly spaced interevent time assumes two events occurred time, waiting time since previous (different) time point evenly spread across simultaneous events. instance, observe five events time 10 previous (different) time point 4, raw waiting time calculated . waiting time second event first event 6 (calculated difference two time points, 10-4=6). value waiting time 0 events simultaneous (.e. 10-10=0). scenario, remify spreads waiting time 6 five simultaneous events , indices_simultaneous_events vector indices input edgelist indicating rows edgelist correspond simultaneous events (excluding first simultaneous event). attribute NULL simultaneous events sequence. Considering example , five simultaneous events time 10, remify return following set indices remify, doesn’t remove first simultaneous event case two simultaneous events sequence time point must processed group simultaneous events occurred specific time point.","code":"time_points <- c(4,10,10,10,10,10) waiting_times <- diff(time_points) # waiting_times: [1] 6 0 0 0 0 calculated as t[m]-t[m-1] rep(waiting_times[1]/5,5)# 5 is the number of events in the example observed at the same time (10) ## [1] 1.2 1.2 1.2 1.2 1.2 time_points <- c(4,10,10,10,10,10) diff(time_points) # waiting times calculated as t[m]-t[m-1] ## [1] 6 0 0 0 0 which(diff(time_points)==0) # indices of simultaneous events, excluding the first simultaneous event ## [1] 2 3 4 5 # attr(edgelist_reh, \"evenly_spaced_interevent_time\")  # attr(edgelist_reh, \"indices_simultaneous_events\")"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"Process a Relational Event History","text":"available methods remify object : print, summary, dim, getRiskset, getActorName, getTypeName, getDyad, getActorID, getTypeID, getDyadID plot.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"print-and-summary","dir":"Articles","previous_headings":"Methods","what":"print() and summary()","title":"Process a Relational Event History","text":"print() summary() print brief summary relational network data.","code":"summary(edgelist_reh) # same output as `print(edgelist_reh)` or just `edgelist_reh` ## Relational Event Network ## (processed for tie-oriented modeling): ##  > events = 9915 ##  > actors = 20 ##  > (event) types = 3 ##  > riskset = active ##      >> active dyads = 1130 (full risk set size = 1140 dyads) ##  > directed = TRUE ##  > ordinal = FALSE ##  > weighted = FALSE ##  > time length ~ 80 days ##  > interevent time  ##       >> minimum ~ 0.0011 seconds ##       >> maximum ~ 5811.4011 seconds"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"dim","dir":"Articles","previous_headings":"Methods","what":"dim()","title":"Process a Relational Event History","text":"dim() returns useful dimensions characterizing network, : number events, number actors, number event types (omitted case networks one event types), largest number possible dyads (\\(D\\)) , finally, number active dyads (activeD, showed riskset = \"active\").","code":"dim(edgelist_reh) ##        events        actors         types         dyads dyads(active)  ##          9915            20             3          1140          1130"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"getriskset","dir":"Articles","previous_headings":"Methods","what":"getRiskset()","title":"Process a Relational Event History","text":"risk set \"active\" \"manual\", getRiskset() returns processed risk set matrix (two dynamic risk sets actor-oriented modeling) explained ‘Output’ section.","code":"getRiskset(x = edgelist_reh)$riskset[,1:10] # printing out the risk set modifications of only the first 10 columns (dyads). A total number of 2 modifications of the risk set are observed (by row) ##  [1] 1 1 1 1 1 1 1 1 1 1"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"getactorname","dir":"Articles","previous_headings":"Methods","what":"getActorName()","title":"Process a Relational Event History","text":"getActorName(x,actorID): supplying one actorID’s (1 edgelist_reh$N) returns corresponding (input) names.","code":"getActorName(x = edgelist_reh, actorID = c(1,13,20)) ## [1] \"Alexander\" \"Lexy\"      \"Zackary\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"gettypename","dir":"Articles","previous_headings":"Methods","what":"getTypeName()","title":"Process a Relational Event History","text":"getTypeName(x,typeID): supplying one typeID’s (1 edgelist_reh$C) returns corresponding (input) names.","code":"getTypeName(x = edgelist_reh, typeID = c(1,3)) ## [1] \"competition\" \"cooperation\""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"getdyad","dir":"Articles","previous_headings":"Methods","what":"getDyad()","title":"Process a Relational Event History","text":"getDyad(x, dyadID, active): supplying one dyadID’s returns data.frame dyad composition “actor1”, “actor2” “type” (type present). active = FALSE, method expects vector dyadID consist ID’s dyads full risk set (1 edgelist_reh$D). risk set processed remify object \"active\", also possible get dyad composition ID active dyads declaring argument active = TRUE supplying vector ID’s active dyads dyadID (ranging 1 edgelist_reh$activeD).","code":"getDyad(x = edgelist_reh, dyadID = c(1,10,100), active = FALSE) ##   dyadID    actor1 actor2        type ## 1      1 Alexander Andrey competition ## 2     10 Alexander Kelsey competition ## 3    100   Crystal Colton competition"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"getactorid","dir":"Articles","previous_headings":"Methods","what":"getActorID()","title":"Process a Relational Event History","text":"getActorID(x,actorName): supplying one actorName’s returns corresponding ID’s.","code":"getActorID(x = edgelist_reh, actorName = c(\"Michaela\",\"Alexander\",\"Lexy\")) ## [1] 17  1 13"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"gettypeid","dir":"Articles","previous_headings":"Methods","what":"getTypeID()","title":"Process a Relational Event History","text":"getTypeID(x,typeName): supplying one typeName’s (types present event sequence) returns corresponding ID’s.","code":"getTypeID(x = edgelist_reh, typeName = \"cooperation\") ## [1] 3"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"getdyadid","dir":"Articles","previous_headings":"Methods","what":"getDyadID()","title":"Process a Relational Event History","text":"getDyadID(x,actor1,actor2,tpye): supplying vector names actor1, actor2 type returns corresponding dyad ID. names supply original input names edgelist processing. method can work one input dyad form [actor1,actor2,type]. argument type can left NULL sequence event types (attribute \"with_type\" FALSE).","code":"getDyadID(x = edgelist_reh, actor1 = \"Alexander\", actor2 = \"Charles\", type = \"cooperation\") ##       dyadID dyadIDactive  ##          763          753"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/remify.html","id":"plot","dir":"Articles","previous_headings":"Methods","what":"plot()","title":"Process a Relational Event History","text":"plot() returns different descriptive plots: histogram inter-event times activity plot, tile plot color tiles proportional count directed (undirected) dyad. -degree -degree activity line plots plotted sides (total-degree top side, network undirected). directed networks two plots normalized -degree -degree values per actor (ranging \\([0,1]\\)) set n_intervals (evenly spaced). undirected networks, one plot normalized total-degree n_intervals (also values ranging [0,1]). normalization calculated interval \\[\\frac{(degree-min(degree))}{(max(degree)-min(degree))}\\] actor considering minimum maximum degree (-, - total-, degree) observed interval (opacity size points proportional normalized measure) four plots: () number events (# events) per time interval, (ii) proportion observed dyads (# dyads / x$D) per time interval, (iii) (iv) (directed network ) proportion active senders receivers per time interval (calculated # senders/ x$N # receiver/x$N per interval) two networks: () network events edges considered undirected (edges’ opacity proportional counts undirected events, vertices’ opacity proportional total-degree actors), (ii) visualization directed network (edges’ opacity proportional counts directed events, vertices’ opacity proportional -degree actors).      plots slightly vary case undirected networks:","code":"op <- par(no.readonly = TRUE) par(mai=rep(0.8,4), cex.main=0.9, cex.axis=0.75) plot(x=edgelist_reh,which=1,n_intervals=13) # histogram of inter-event times plot(x=edgelist_reh,which=2,n_intervals=13) # tile plot (counts of dyadic events) with in-/out- degree of actors on the sides plot(x=edgelist_reh,which=3,n_intervals=13) # (normalized) in-degree and out-degree of actors plot(x=edgelist_reh,which=4,n_intervals=13) # per time interval: number of events, proportion of observed dyads, proportion of active senders and active receivers plot(x=edgelist_reh,which=5,n_intervals=13,igraph.edge.color=\"#cfcece\",igraph.vertex.color=\"#7bbfef\") # networks par(op) edgelist_reh <- remify(edgelist = randomREH$edgelist,                     directed = FALSE, # events are now considered undirected                     model = \"tie\")     #op <- par(no.readonly = TRUE) #par(mai, rep(0.8,4), cex.main=0.9, cex.axis=0.75)            #plot(x=edgelist_reh,which=1:5,n_intervals=13) #par(op)"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"definition-of-risk-set","dir":"Articles","previous_headings":"","what":"Definition of risk set","title":"Risk set","text":"relational event history consists time-ordered sequence (directed undirected) interaction. event, know: time occurrence, either timestamp/date/continuous value just order actors involved realtional event type event (measured) instance, first five events randomREHsmall sequence reported follows time, actor1, actor2 describe observed event sequence (Note example type events annotated). modeling relational event sequence, define per time point risk set, consists set relational events (dyads) specific time point likely observed (set also contains event actually observed specific time point). definition risk set important building block likelihood function tie-oriented actor-oriented modeling framework. sections vignette, discuss three possible definitions risk set: full, active manual risk set. three types risk set can processed remify::remify() specifying risk set type input argument riskset.","code":"randomREHsmall$edgelist[1:5,] ##                  time  actor1 actor2 ## 1 2020-03-05 15:36:37  Colton  Kayla ## 2 2020-03-05 18:34:11    Lexy Colton ## 3 2020-03-05 19:49:37  Colton  Kayla ## 4 2020-03-05 20:38:23  Colton  Kayla ## 5 2020-03-06 05:54:12 Richard Colton"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"the-full-risk-set","dir":"Articles","previous_headings":"Definition of risk set","what":"The full risk set","title":"Risk set","text":"common definition risk set assumes possible dyads likely occur whole observation period. refer definition full risk set. network N actors consists directed events can assume number C possible event types, risk set characterized possible directed dyads among N actors, D = N(N-1)C, D = N(N-1)C/2 case undirected dyads. instance, random network (randomREHsmall) dyads directed, actors N = 5 event types C = 1, therefore expect dimension risk set D = 5 * 4 * 1 = 20. first five dyads full risk set ID dyads (dyadID) corresponds order dyads used functions `processed functionremify::remify()`. ID dyads defined two-steps approach: alphanumeric order follows first order numbers 0 9, alphabetical order letters. instance, given vector names c(\"user22\",\"0usr\",\"1user\",\"1deer\"), alphanumeric order c(\"0usr\",\"1deer\",\"1user\",\"user22) event type phase, processing function remify::remify() also assign numeric IDs actors event types dyads defined triple c(actor1,actor2,type) found looping first actor2, actor1, finally type. example loops shown matrix dyad_mat describes full risk set row indices correspond ID dyad (dyadID). instance, dyadID useful case tie-oriented modeling, remify object contain attribute named \"dyad\", describes time-ordered sequence ID’s observed dyads.","code":"# method getDyad(), see more in ?remify::getDyad getDyad(x = reh, dyadID = c(1:5)) ##   dyadID    actor1    actor2 ## 1      1    Colton Francesca ## 2      2    Colton     Kayla ## 3      3    Colton      Lexy ## 4      4    Colton   Richard ## 5      5 Francesca    Colton # sorted vector of actors' names sorted_actors <- sort(randomREHsmall$actors) sorted_actors ## [1] \"Colton\"    \"Francesca\" \"Kayla\"     \"Lexy\"      \"Richard\" # number of actors in the network N <- length(randomREHsmall$actors) # no event type, we set it to an empty string sorted_types <- c(\" \")   # C = 1 for 'randomREHsmall' C <- length(sorted_types) # IDs of actors will consist of an integer number from 1 to N names(sorted_actors) <- 1:N sorted_actors ##           1           2           3           4           5  ##    \"Colton\" \"Francesca\"     \"Kayla\"      \"Lexy\"   \"Richard\" # IDs of types will be an integer number from 1 to C names(sorted_types) <- 1:C # in this case is one (artificial) event type sorted_types ##   1  ## \" \" # initializing matrix object where to store the dyads as [actor1,actor2,type] dyad_mat <- matrix(NA, nrow = N*(N-1)*C, ncol = 3) colnames(dyad_mat) <- c(\"actor1\",\"actor2\",\"type\") rownames(dyad_mat) <- 1:(N*(N-1)*C)  # initializing position index d <- 1   # start three loops for(type in sorted_types){ # loop over event types,    for(actor1 in sorted_actors){ # loop over actor1     for(actor2 in sorted_actors){ # loop over actor2       if(actor1!=actor2){ # avoid self-loops         dyad_mat[d,] <- c(actor1,actor2,type)         d <- d + 1       }     }   } }   # same result as showed above by using the method `getDyad()` dyad_mat[1:5,] ##   actor1      actor2      type ## 1 \"Colton\"    \"Francesca\" \" \"  ## 2 \"Colton\"    \"Kayla\"     \" \"  ## 3 \"Colton\"    \"Lexy\"      \" \"  ## 4 \"Colton\"    \"Richard\"   \" \"  ## 5 \"Francesca\" \"Colton\"    \" \" # checking the size of the _full_ risk set that is 20 dim(dyad_mat)[1] ## [1] 20 # accessing the first values of the attribute \"dyad\"  # (attribute available only for tie-oriented modeling) head(attr(reh,\"dyad\")) ## [1]  2 13  2  2 17  2"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"visualizing-the-risk-set","dir":"Articles","previous_headings":"Definition of risk set","what":"Visualizing the risk set","title":"Risk set","text":"possible way visualizing risk set composition time point consists plotting grid actors’ names axes: referring senders (y-axis) receivers (x-axis). Cosidering first four time points randomREHsmall, observe: (directed) dyad (Colton,Kayla) time \\(t_1\\), \\(t_3\\) \\(t_4\\) (directed) dyad (Lexy,Colton) time \\(t_2\\). cell corresponding relational event occurred time point colored green. rest cells colored gray, indicating dyadic events occurred part risk set. Cells white, indicate events occur (case self-loops, like (Colton,Colton), sender receiver actor). full risk set undirected networks assume particular grid visualization. dyads risk lower triangular grid, actor names c(actor1,actor2) describing dyad input edgelist sorted according alphanumeric order processed. instance, event \\(t_2\\) c(\"Lexy\",\"Colton\"), rearranged c(\"Colton\",\"Lexy\"), risk set change follows picture .","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"the-active-and-manual-risk-set","dir":"Articles","previous_headings":"","what":"The active and manual risk set","title":"Risk set","text":"full risk set assumed constant structure throughout whole event history. possible dyads assumed always risk regardless consideration : () possibility one actors still able interact actors observation period, (ii) possiblity event types actually occur. observation, concept risk set structure changes time may accomodate certain relational event histories , actors, dyads event types may observed within prespecified time windows. Two alternative definitions risk set can declared remify::remify(): active risk set, reduces size dyadic events observed across event history mantains (modified) structure time manual riskset, allows user specify flexible risk set time-varying structure, actor, dyads event types can excluded specific time intervals event history.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"the-active-risk-set","dir":"Articles","previous_headings":"The active and manual risk set","what":"The active risk set","title":"Risk set","text":"exist relational event networks large number actors number observed dyads far lower potential number dyads (.e. size \\(D\\) full risk set). measure global density can calculated whole event sequence ratio \\(D_{\\text{obs}}/D\\), \\(D_{\\text{obs}}\\) number observed dyadic events can vary \\(1\\) \\(D\\). low portion dyads takes action network, can think restricting risk set observed dyads. risk set reduction leads active risk set, mantains structure time restricted dyads observed least one time event history. type risk set can declared specifying riskset = \"active\" remify::remify() use active risk set can significantly decrease computational time calculation statistics estimation model parameters. However, reduction risk set set active (observed) dyads causes exclusion dyadic events perhaps still included risk set. always good practice explore set active dyads take due considerations given type data hand, instance: () expecting potential biases coming definition active risk set, (ii) considering define modification active risk set avoids exclusion set additional actors/dyads/event types risk set even observed event history.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"the-manual-risk-set","dir":"Articles","previous_headings":"The active and manual risk set","what":"The manual risk set","title":"Risk set","text":"circumstances one actors take part relational event event type observed. can happen either time window can assume one following definitions: time window embedded event history, e.g., actors temporarily drop network time window starts time point start event history stops end history, e.g., actors leave network without poissibility return time window starts beginning event history stops end study, e.g., actors join network beginning event history interact join. give grasp possible real scenarios actors/dyads/event types may excluded risk set, introduce three examples: Example 1: relational event network -person interactions (e.g., university school) measured days (even weeks months). One actors may present one days, therefore want exclude actors risk set specific time spans interact. Furthermore, one actors may join (leave) network () beginning (end) event history can also define specific restrictions risk set actors. Example 2: relational events observed conference multiple sessions workshops can occur time. case, set dyads risk reduces smaller different risk sets, one based groups actors participating specific session workshop (constraints risk set apply response spatial constraints sesison workshop). Example 3: relational events digital interactions one actors interact one another appear ’s friends list (may requirement order able interact). scenarios many others, full risk set account relational events feasible may even lead biased estimates model parameters. contrary, possible account changes risk set time defining manual risk set. manual risk set consists time-based definition ensemble dyads risk user specifies dyads remove full risk set specific time interval study. can done via omit_dyad argument function remify::remify(). user can define multiple modifications full risk set occurring different, even overlapping, time windows. modification, user specifies set actors, dyads, event types omitted. Consider first four time points small random network assume time actors \"Richard\" \"Francesca\" didn’t join study second day study. means risk set least first four time points following composition, tiles defining dyads \"Richard\" \"Francesca\" either sender (actor1) receiver (actor2) excluded risk set (tiles now white). risk set now made dyads \"Colton\", \"Kayla\" \"Lexy\"either sender receiver relational event (tiles gray). Finally, manual risk set can defined also undirected networks grid visualization focus lower triangular grid, actor names c(actor1,actor2) describing dyad input edgelist sorted according alphanumeric order processing. instance, event \\(t_2\\) c(\"Lexy\",\"Colton\"), rearranged c(\"Colton\",\"Lexy\"), thus risk set change .","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"specifying-a-manual-risk-set-the-omit_dyad-argument","dir":"Articles","previous_headings":"The active and manual risk set > The manual risk set","what":"Specifying a manual risk set: the omit_dyad argument","title":"Risk set","text":"input argument omit_dyad required argument riskset = \"manual\". argument, user describes time windows actor/dyads/event types exclude . object supply via argumen omit_dyad consists list modifications. list refers one risk set modification must list two objects: data.frame called dyad, dyads removed specified row format actor1, actor2, type, vector called time describes first last time point time window apply modification.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"example-on-five-risk-set-modifications","dir":"Articles","previous_headings":"The active and manual risk set > The manual risk set","what":"Example on five risk set modifications","title":"Risk set","text":"Consider randomREH data. instance, want modify (reduce) risk set according five changes apply different time intervals: event type conflict feasible since specific time point end observation period. two actors Michaela Zackary couldn’t interact anybody else specific time point last observed time point. object dyad give instructions function remove risk set indicated time windows events : (1) type conflict, (2) Michaela `Zackary senders receivers. example also add three modifications risk set present object randomREH$omit_dyad allow explain input omit_dyad works, also processed risk set object look like (next section): actors Maya, Alexander, Richard Charles joined network start event history. actor Breanna left network long time interval (2 months) embedded event history. actor Megan left network days.","code":"data(randomREH) randomREH$omit_dyad[[1]]$time # start and stop time point defining the time window of interest ## [1] \"2020-05-07 20:42:38 UTC\" \"2020-05-23 21:46:41 UTC\" randomREH$omit_dyad[[1]]$dyad # dyads to be removed from the time points defined by the interval in `time` ##   actor1 actor2     type ## 1     NA     NA conflict randomREH$omit_dyad[[2]]$time ## [1] \"2020-05-19 23:30:09 UTC\" \"2020-05-23 21:46:41 UTC\" randomREH$omit_dyad[[2]]$dyad ##     actor1   actor2 type ## 1 Michaela     <NA>   NA ## 2     <NA> Michaela   NA ## 3  Zackary     <NA>   NA ## 4     <NA>  Zackary   NA randomREH$omit_dyad[[3]]$time ## [1] NA                        \"2020-04-02 03:31:13 UTC\" randomREH$omit_dyad[[3]]$dyad ##      actor1    actor2 type ## 1      Maya      <NA>   NA ## 2 Alexander      <NA>   NA ## 3   Richard      <NA>   NA ## 4   Charles      <NA>   NA ## 5      <NA>      Maya   NA ## 6      <NA> Alexander   NA ## 7      <NA>   Richard   NA ## 8      <NA>   Charles   NA randomREH$omit_dyad[[4]]$time ## [1] \"2020-03-27 09:55:56 UTC\" \"2020-05-13 10:17:57 UTC\" randomREH$omit_dyad[[4]]$dyad ##    actor1  actor2 type ## 1 Breanna    <NA>   NA ## 2    <NA> Breanna   NA randomREH$omit_dyad[[5]]$time ## [1] \"2020-04-30 07:44:08 UTC\" \"2020-05-04 01:20:53 UTC\" randomREH$omit_dyad[[5]]$dyad ##   actor1 actor2 type ## 1  Megan   <NA>   NA ## 2   <NA>  Megan   NA"},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"using-na-values-to-remove-sets-of-actorsdyadsevent-types","dir":"Articles","previous_headings":"The active and manual risk set > The manual risk set","what":"Using NA values to remove sets of actors/dyads/event types","title":"Risk set","text":"<NA> values mean actors/event types considered field. Indeed, change 1. needed remove events conflict type, leaving actor1 actor2 unspecified <NA>. Therefore, every time one fields among (actor1,actor2,type) left undefined, reduction applies possible values field. Another example risk set chages declared 4. 5., wanted exclude dyads Breanna Megan either sender receiver relational event. Therefore, defined data.frame named \"dyad\" two rows: one row Breanna(Megan) appeared sender, second row Breanna (Megan) appeared receiver. left fields set NA, meaning (row) possible event types actors considered.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"visualizing-the-risk-set-modifications-declared-with-omit_dyad-before-the-processing","dir":"Articles","previous_headings":"The active and manual risk set > The manual risk set","what":"Visualizing the risk set modifications declared with omit_dyad (before the processing)","title":"Risk set","text":"can visualize risk set modifications declared via omit_dyad argument plot x-axis represents time y-axis describes five risk set modifications presented .","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/articles/riskset.html","id":"the-processed-risk-set","dir":"Articles","previous_headings":"","what":"The processed risk set","title":"Risk set","text":"function remify::remify() processes list modifications supplied omit_dyad (riskset = \"manual\"). aim elaborate risk set modifications accounting possible partial/complete overlapping time windows. way understand whatthe processing consider plot input modifications show plot final processing. processing function understands partial/complete overlapping time windows defines new time intervals one risk set changes observed. plot , vertical boundaries (dashed red lines) indicate time intervals. time bounds used processing function intersect time windows decalred omit_dyad define new time intervals, changes risk set processed according new time windows. user supplies time windows overlapping, processed risk set structure input. processing relational event history, remify object contain list called omit_dyad two objects (time riskset) describe processed risk set modifications. result processing five risk set modifications, risk set describe now eight risk set modifications. due partial/total overlapping two time intervals. instance, second modification processed risk set (figure ) contain combination third fourth modification declared input omit_dyad (figure ).","code":"edgelist_reh <- remify::remify(edgelist = randomREH$edgelist,                     directed = TRUE, # events are directed                     ordinal = FALSE, # model with waiting times                     model = \"tie\", # tie-oriented modeling                     actors = randomREH$actors,                     types = randomREH$types,                      riskset = \"manual\",                     origin = randomREH$origin,                     omit_dyad = randomREH$omit_dyad)"},{"path":"https://tilburgnetworkgroup.github.io/remify/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giuseppe Arena. Author, maintainer. Rumana Lakdawala. Contributor. Marlyne Meijerink-Bosman. Contributor. Diana Karimova. Contributor. Fabio Generoso Vieira. Contributor. Mahdi Shafiee Kamalabad. Contributor. Roger Leenders. Contributor. Joris Mulder. Contributor.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Arena G (2024). remify: Processing Transforming Relational Event History Data. R package version 3.2.6, https://github.com/TilburgNetworkGroup/remify.","code":"@Manual{,   title = {remify: Processing and Transforming Relational Event History Data},   author = {Giuseppe Arena},   year = {2024},   note = {R package version 3.2.6},   url = {https://github.com/TilburgNetworkGroup/remify}, }"},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remify/index.html","id":"processing-and-transforming-relational-event-history-data","dir":"","previous_headings":"remify","what":"Processing and Transforming Relational Event History Data","title":"Processing and Transforming Relational Event History Data","text":"aim remify package twofold: processing REH data arranging new structure (remify) used packages remverse; transforming REH data remify structure formats used R packages. two main functions remify() rehshape() perform respectively processing conversion REH data.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/index.html","id":"installation","dir":"","previous_headings":"remify","what":"Installation","title":"Processing and Transforming Relational Event History Data","text":"Install package R CRAN:","code":"install.packages(\"remify\") library(remify)"},{"path":"https://tilburgnetworkgroup.github.io/remify/index.html","id":"vignettes","dir":"","previous_headings":"remify","what":"Vignettes","title":"Processing and Transforming Relational Event History Data","text":"order provide thorough explanation two main functions, vignette inputs, outputs, attributes methods described detail. List vignettes available installed version remify Open vignette specific topic","code":"vignette(package = \"remify\") vignette(topic = \"remify\", package = \"remify\") # or simply vignette(\"remify\")"},{"path":"https://tilburgnetworkgroup.github.io/remify/index.html","id":"problems-while-remify-ing","dir":"","previous_headings":"remify","what":"Problems while remify-ing?","title":"Processing and Transforming Relational Event History Data","text":"encounter errors using package, questions answered Vignettes, reporting kind malfunction package, can open issue . opening issue, please, use descriptive title clearly states issue, thorough possible describing issue, provide code snippets can reproduce issue.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/index.html","id":"funding","dir":"","previous_headings":"remify","what":"Funding","title":"Processing and Transforming Relational Event History Data","text":"funder work ERC ERC project number 758791.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/dim.remify.html","id":null,"dir":"Reference","previous_headings":"","what":"dim.remify — dim.remify","title":"dim.remify — dim.remify","text":"function returns dimension temporal network.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/dim.remify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dim.remify — dim.remify","text":"","code":"# S3 method for remify dim(x)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/dim.remify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dim.remify — dim.remify","text":"x remify object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/dim.remify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dim.remify — dim.remify","text":"vector dimensions processed event sequence.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/dim.remify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dim.remify — dim.remify","text":"","code":"# processing the random network 'randomREHsmall' library(remify) data(randomREHsmall) reh <- remify(edgelist = randomREHsmall$edgelist,               model = \"tie\")  # dimensions of the processed 'remify' object dim(reh) #> events actors  dyads  #>    586      5     20"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":null,"dir":"Reference","previous_headings":"","what":"getActorID — getActorID","title":"getActorID — getActorID","text":"function given vector actor names returns corresponding vector ID's.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getActorID — getActorID","text":"","code":"getActorID(x, actorName = NULL)  # S3 method for remify getActorID(x, actorName = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getActorID — getActorID","text":"x remify object. actorName vector actor names. names input edgelist.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getActorID — getActorID","text":"actor ID integer value.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getActorID — getActorID","text":"getActorID(remify): return actor's ID actor's name","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getActorID — getActorID","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find actor ID from the actor name getActorID(x = reh, actorName = c(\"Francesca\",\"Kayla\")) #> [1]  8 10"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":null,"dir":"Reference","previous_headings":"","what":"getActorName — getActorName","title":"getActorName — getActorName","text":"function given vector actor ID's returns corresponding vector actor (input) names.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getActorName — getActorName","text":"","code":"getActorName(x, actorID = NULL)  # S3 method for remify getActorName(x, actorID = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getActorName — getActorName","text":"x remify object. actorID vector actor ID's. ID value can range 1 N (number actors network).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getActorName — getActorName","text":"character vector actors' names.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getActorName — getActorName","text":"getActorName(remify): return actor's name actor's ID","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getActorName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getActorName — getActorName","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find actor name from actor ID getActorName(x = reh, actorID = c(1,2,8,12)) #> [1] \"Alexander\" \"Andrey\"    \"Francesca\" \"Kiffani\""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":null,"dir":"Reference","previous_headings":"","what":"getDyad — getDyad","title":"getDyad — getDyad","text":"function given vector one dyad ID's returns corresponding dyad composition \"actor1\", \"actor2\" \"type\" (event types present). ID's supply must range 1 D (largest risk set size).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDyad — getDyad","text":"","code":"getDyad(x, dyadID, active = FALSE)  # S3 method for remify getDyad(x, dyadID, active = FALSE)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDyad — getDyad","text":"x remify object. dyadID vector one dyad ID's, one ranging 1 D (largest risk set size). active logical, whether consider input dyadID vector ID's active dyads (active = TRUE) dyads full risk set (active = FALSE).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDyad — getDyad","text":"data.frame \"actor1\", \"actor2\" \"type\" names corresponding vector dyadID.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getDyad — getDyad","text":"getDyad(remify): return dyad composition actor1, actor2 type one () dyad ID","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDyad — getDyad","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find dyad composition (names of actor1, actor2 and type) from the dyad ID getDyad(x = reh, dyadID = c(450,239,900)) #>   dyadID    actor1 actor2        type #> 1    450   Charles   Maya    conflict #> 2    239      Lexy Kelsey competition #> 3    900 Francesca  Derek cooperation"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":null,"dir":"Reference","previous_headings":"","what":"getDyadID — getDyadID","title":"getDyadID — getDyadID","text":"function given vector names actor1, actor2 type returns corresponding dyad ID. names supply original input names edgelist processing via function remify::remify().","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getDyadID — getDyadID","text":"","code":"getDyadID(x, actor1, actor2, type)  # S3 method for remify getDyadID(x, actor1, actor2, type)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getDyadID — getDyadID","text":"x remify object. actor1 [character] name actor1. actor2 [character] name actor2. type [character] name type.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getDyadID — getDyadID","text":"dyad ID integer value.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getDyadID — getDyadID","text":"getDyadID(remify): return dyad's ID dyad's composition","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getDyadID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getDyadID — getDyadID","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find dyad ID from dyad composition (names of actor1, actor2 and type) getDyadID(x = reh, actor1 = \"Francesca\", actor2 = \"Kayla\", type = \"conflict\") #> [1] 522"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":null,"dir":"Reference","previous_headings":"","what":"getRiskset — getRiskset","title":"getRiskset — getRiskset","text":"function returns processed risk set changes specified input `omit_dyad`. matrix: value 1 refers dyads risk set, 0 otherwise (dyads excluded risk set). possible risk set modifications described row, columns identify dyads. Note: matrix output given processing input `omit_dyad`, number rows might equal higher number objects `omit_dyad`. might happen one modification risk set defined input overlap time others. details risk set processed, see vignette(package=\"remify\",topic=\"riskset\").","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getRiskset — getRiskset","text":"","code":"getRiskset(x)  # S3 method for remify getRiskset(x)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getRiskset — getRiskset","text":"x remify object.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getRiskset — getRiskset","text":"list objects describing processed risk set.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getRiskset — getRiskset","text":"getRiskset(remify): manual riskset object","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getRiskset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getRiskset — getRiskset","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # structure of the processed risk set str(getRiskset(reh)) #> List of 1 #>  $ riskset: int [1:2, 1:1140] 1 1 1 1 1 1 1 1 1 1 ..."},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":null,"dir":"Reference","previous_headings":"","what":"getTypeID — getTypeID","title":"getTypeID — getTypeID","text":"function given vector type names returns corresponding vector ID's.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getTypeID — getTypeID","text":"","code":"getTypeID(x, typeName = NULL)  # S3 method for remify getTypeID(x, typeName = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getTypeID — getTypeID","text":"x remify object. typeName vector type names. names input edgelist.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getTypeID — getTypeID","text":"type ID integer value.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getTypeID — getTypeID","text":"getTypeID(remify): return type's ID type's name","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getTypeID — getTypeID","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find type ID from the type name getTypeID(x = reh, typeName = c(\"conflict\",\"cooperation\")) #> [1] 2 3"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":null,"dir":"Reference","previous_headings":"","what":"getTypeName — getTypeName","title":"getTypeName — getTypeName","text":"function given vector type ID's returns corresponding vector type (input) names.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getTypeName — getTypeName","text":"","code":"getTypeName(x, typeID = NULL)  # S3 method for remify getTypeName(x, typeID = NULL)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getTypeName — getTypeName","text":"x remify object. typeID vector type ID's. ID value can range 1 C (number event types network).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getTypeName — getTypeName","text":"character vector types' names.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"getTypeName — getTypeName","text":"getTypeName(remify): return type's name type's ID","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/getTypeName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getTypeName — getTypeName","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # find type name from type ID getTypeName(x = reh, typeID = c(1,3)) #> [1] \"competition\" \"cooperation\""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/plot.remify.html","id":null,"dir":"Reference","previous_headings":"","what":"plot.remify — plot.remify","title":"plot.remify — plot.remify","text":"several plots describe network relational events, directed undirected relational events.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/plot.remify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot.remify — plot.remify","text":"","code":"# S3 method for remify plot(   x,   which = c(1:5),   breaks = 15L,   palette = \"Purples\",   n_intervals = 4L,   rev = TRUE,   actors = attr(x, \"dictionary\")$actors$actorName,   pch.degree = 20,   igraph.edge.color = \"#4daa89\",   igraph.vertex.color = \"#5AAFC8\",   ... )"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/plot.remify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot.remify — plot.remify","text":"x remify object. one numbers 1 5. Plots described order: (1) distribution inter-event times (histogram), (2) tile plot titled 'activity plot', -degree -degree activity line plots sides (total-degree top side network undirected). Tiles' color scaled based count directed (undirected) dyad, (3) directed networks two plots normalized -degree -degree (values ranging [0,1]) set n_intervals (evenly spaced). undirected networks one plot normalized total-degree n_intervals (also values ranging [0,1]). normalization calculated interval (degree-min(degree))/(max(degree)-min(degree))) actor considering minimum maximum degree (-, - total-) observed interval (opacity size points proportional normalized measure), (4) four plots: () number events (# events) per time interval, (ii) proportion observed dyads (# dyads / x$D) per time interval, (iii) (iv) (directed network ) proportion active senders receivers per time interval (calculated # senders/ x$N # receiver/x$N per interval), (5) two networks: () network events edges considered undirected (edges' opacity proportional counts undirected events, vertices' opacity proportional total-degree actors), (ii) visualization directed network (edges' opacity proportional counts directed events, vertices' opacity proportional -degree actors). breaks default 15L describes number cells histogram plot inter-event times.  can specified way argument used function graphics::hist() (see ?graphics::hist details). palette palette grDevices::hcl.pals() (default \"Purples\" palette). n_intervals number time intervals time plots (default 10). rev default TRUE (reverse order color specified palette) actors default set actors network (see attr(x,\"dictionary\")[[\"actors\"]]). user can specify subset actors run descriptive plots. set contains 50 actors, function select 50 active actors set provided. pch.degree default 20. Shape points degree plots (-degree, -degree, total-degree). igraph.edge.color color edges visualization network vertices nodes. user can specify hex value color, color name use functiongrDevices::rgb() returns hex value. igraph.vertex.color color vertices visualization network vertices nodes. user can specify hex value color, color name use function grDevices::rgb() returns hex value. ... graphical parameters","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/plot.remify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot.remify — plot.remify","text":"return value, called plotting descriptives relational event history data.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/plot.remify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot.remify — plot.remify","text":"Generic plot method","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/print.remify.html","id":null,"dir":"Reference","previous_headings":"","what":"print.remify — print.remify","title":"print.remify — print.remify","text":"print summary event history.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/print.remify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"print.remify — print.remify","text":"","code":"# S3 method for remify print(x, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/print.remify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"print.remify — print.remify","text":"x remify object. ... arguments.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/print.remify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"print.remify — print.remify","text":"displays information provided summary method.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/print.remify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"print.remify — print.remify","text":"","code":"# processing the random network 'randomREHsmall' library(remify) data(randomREHsmall) reh <- remify(edgelist = randomREHsmall$edgelist,               model = \"tie\")  # printing a summary of the processed 'remify' object print(reh) #> Relational Event Network #> (processed for tie-oriented modeling): #> \t> events = 586 #> \t> actors = 5 #> \t> riskset = full #> \t> directed = TRUE #> \t> ordinal = FALSE #> \t> weighted = FALSE #> \t> time length ~ 79 days #> \t> interevent time  #> \t\t >> minimum ~ 1 seconds #> \t\t >> maximum ~ 85906.6565 seconds"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREH.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Relational Event History — randomREH","title":"Random Relational Event History — randomREH","text":"randomly generated sequence relational events 20 actors 9915 events. event type associated one three following sentiments: conflict, competition cooperation.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Relational Event History — randomREH","text":"","code":"randomREH"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREH.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Relational Event History — randomREH","text":"data(randomREH) load list containing following objects: edgelist data.frame contains random sequence events. Columns edgelist : time timestamp indicating time event occurred; actor1 name actor generated relational event; actor2 name actor received relational event; type type relational event.  actors names actors interacting dynamic network. types names event types observed network describing sentiment interaction (conflict, competition cooperation). origin starting time point (t_0) prior first observed event (t_1), class object must one time column edgelist. omit_dyad list element describes alteration riskset takes place specific time points certain actors /types.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Relational Event History — randomREH","text":"","code":"data(randomREH)  # actors names randomREH$actors #>  [1] \"Crystal\"   \"Colton\"    \"Lexy\"      \"Kelsey\"    \"Michaela\"  \"Zackary\"   #>  [7] \"Richard\"   \"Maya\"      \"Wyatt\"     \"Kiffani\"   \"Alexander\" \"Kayla\"     #> [13] \"Derek\"     \"Justin\"    \"Andrey\"    \"Francesca\" \"Megan\"     \"Mckenna\"   #> [19] \"Charles\"   \"Breanna\"    # types names randomREH$types #> [1] \"conflict\"    \"competition\" \"cooperation\"  # looking into the first modification of the riskset: omit_dyad[[1]] ## the data.frame `dyad` specifies which dyads will be omitted from the riskset  ## (all the dyads that expressed a `conflict` between actor won't be part of the riskset): randomREH$omit_dyad[[1]]$dyad  #>   actor1 actor2     type #> 1     NA     NA conflict  ## the vector `time` specifies the time points when this exclusion takes place  head(randomREH$omit_dyad[[1]]$time) # (printing out only the first 10 time points) #> [1] \"2020-05-07 20:42:38 UTC\" \"2020-05-23 21:46:41 UTC\"  # run the preprocessing function reh() by supplying the loaded objects. edgelist_reh <- remify(edgelist = randomREH$edgelist,                     actors = randomREH$actors,                     types = randomREH$types,                      directed = TRUE,                     ordinal = FALSE,                     origin = randomREH$origin,                     omit_dyad = randomREH$omit_dyad,                     model = \"tie\")  # `edgelist_reh` is an object of class `reh` class(edgelist_reh) #> [1] \"remify\"  # names of objects inside `edgelist_reh` names(edgelist_reh) #> [1] \"M\"              \"N\"              \"C\"              \"D\"              #> [5] \"intereventTime\" \"edgelist\"       \"omit_dyad\""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREHsmall.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Relational Event History (small) — randomREHsmall","title":"Random Relational Event History (small) — randomREHsmall","text":"subset randomly generated sequence relational events `randomREH`, 5 actors 586 events (without event types).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREHsmall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Relational Event History (small) — randomREHsmall","text":"","code":"randomREHsmall"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREHsmall.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random Relational Event History (small) — randomREHsmall","text":"data(randomREHsmall) load list containing following objects: edgelist data.frame contains random sequence events. Columns edgelist : time timestamp indicating time event occurred; actor1 name actor generated relational event; actor2 name actor received relational event;  actors names actors interacting dynamic network. origin starting time point (t_0) prior first observed event (t_1), class object must one time column edgelist. omit_dyad list element describes alteration riskset takes place specific time points certain actors /types.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/randomREHsmall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Relational Event History (small) — randomREHsmall","text":"","code":"data(randomREHsmall)  # actors names randomREHsmall$actors #> [1] \"Colton\"    \"Lexy\"      \"Francesca\" \"Richard\"   \"Kayla\"      # types names randomREHsmall$types #> NULL   # run the preprocessing function reh() by supplying the loaded objects. small_edgelist_reh <- remify(edgelist = randomREHsmall$edgelist,                     actors = randomREHsmall$actors,                     directed = TRUE,                     ordinal = FALSE,                     origin = randomREHsmall$origin,                     omit_dyad = randomREHsmall$omit_dyad,                     model = \"tie\")  # `small_edgelist_reh` is an object of class `reh` class(small_edgelist_reh) #> [1] \"remify\"  # names of objects inside `small_edgelist_reh` names(small_edgelist_reh) #> [1] \"M\"              \"N\"              \"C\"              \"D\"              #> [5] \"intereventTime\" \"edgelist\""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/rehshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform processed remify objects to different formats — rehshape","title":"Transform processed remify objects to different formats — rehshape","text":"function transforms remify object one possible formats suit external packages. function can convert, moment, data structure object class remify data structure required function relevent::rem() function relevent::rem.dyad() 'relevent' package (Butts, C.T. 2023).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/rehshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform processed remify objects to different formats — rehshape","text":"","code":"rehshape(   data,   output_format = c(\"relevent-rem\", \"relevent-rem.dyad\"),   ncores = 1L,   optional_arguments = NULL )"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/rehshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform processed remify objects to different formats — rehshape","text":"data object class 'remify' (see function remify::remify()). output_format character indicating output format input data converted . can assume two values: \"relevent-rem\" , \"relevent-rem.dyad\". Default value \"relevent-rem\". ncores number cores used parallelize internal algorithms optional_arguments vector arguments names relevent::rem relevent::rem.dyad() user might want process output object rehshape (e.g., pre-computed structures required relevent::rem.dyad)","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/rehshape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform processed remify objects to different formats — rehshape","text":"object class specified output_format argument. output class object 'relevent-rem' contains list objects named arguments function relevent::rem(): 'eventlist' (mandatory), 'supplist' (optional), 'timing'(mandatory). output class object 'relevent-rem.dyad' contains list objects named arguments function relevent::rem.dyad(): 'edgelist' (mandatory), 'n' (mandatory), 'ordinal'(optional).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/rehshape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform processed remify objects to different formats — rehshape","text":"","code":"# processing the random network 'randomREH' library(remify) data(randomREH) reh <- remify(edgelist = randomREH$edgelist,               model = \"tie\",               riskset = \"manual\",               omit_dyad = randomREH$omit_dyad)  # convert 'remify' object to output_format = \"relevent-rem\" relevent_rem_obj <- rehshape(data = reh, output_format = \"relevent-rem\")  str(relevent_rem_obj)  #> List of 3 #>  $ eventlist:'data.frame':\t9915 obs. of  2 variables: #>   ..$ dyad: num [1:9915] 182 464 963 4 733 ... #>   ..$ time: POSIXct[1:9915], format: \"2020-03-05 01:47:08\" \"2020-03-05 01:50:18\" ... #>  $ supplist : logi [1:9915, 1:1140] TRUE TRUE TRUE TRUE TRUE TRUE ... #>  $ timing   : chr \"interval\" #>  - attr(*, \"class\")= chr \"relevent-rem\"  # convert 'remify' object to output_format = \"relevent-rem.dyad\" relevent_rem.dyad_obj <- rehshape(data = reh, output_format = \"relevent-rem.dyad\")  summary(relevent_rem.dyad_obj) #>          Length Class      Mode    #> edgelist 3      data.frame list    #> n        1      -none-     numeric #> ordinal  1      -none-     logical"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify-package.html","id":null,"dir":"Reference","previous_headings":"","what":"remify: Processing and Transforming Relational Event History Data — remify-package","title":"remify: Processing and Transforming Relational Event History Data — remify-package","text":"Efficiently processes relational event history data transforms formats suitable packages. primary objective package convert event history data format integrates packages 'remverse' compatible various analytical tools (e.g., computing network statistics, estimating tie-oriented actor-oriented social network models). Second, can also transform data formats compatible packages 'remverse'. package processes data two types temporal social network models: tie-oriented modeling framework (Butts, C., 2008, doi:10.1111/j.1467-9531.2008.00203.x ) actor-oriented modeling framework (Stadtfeld, C., & Block, P., 2017, doi:10.15195/v4.a14 ).","code":""},{"path":[]},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"remify: Processing and Transforming Relational Event History Data — remify-package","text":"Maintainer: Giuseppe Arena g.arena@tilburguniversity.edu (ORCID) contributors: Rumana Lakdawala r.j.lakdawala@tilburguniversity.edu [contributor] Marlyne Meijerink-Bosman [contributor] Diana Karimova d.karimova@tilburguniversity.edu [contributor] Fabio Generoso Vieira f.v.generosovieira@tilburguniversity.edu [contributor] Mahdi Shafiee Kamalabad m.shafieekamalabad@uu.nl [contributor] Roger Leenders r.t..j.leenders@tilburguniversity.edu [contributor] Joris Mulder j.mulder3@tilburguniversity.edu [contributor]","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a Relational Event History — remify","title":"Process a Relational Event History — remify","text":"function processes raw relational event history data returns S3 object class 'remify' used input functions inside 'remverse'.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a Relational Event History — remify","text":"","code":"remify(   edgelist,   directed = TRUE,   ordinal = FALSE,   model = c(\"tie\", \"actor\"),   actors = NULL,   types = NULL,   riskset = c(\"full\", \"active\", \"manual\"),   origin = NULL,   omit_dyad = NULL,   ncores = 1L )"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a Relational Event History — remify","text":"edgelist relational event history. object class data.frame first three columns corresponding time, actors forming dyad. first three columns re-named \"time\", \"actor1\", \"actor2\" (, directed networks, \"actor1\" corresponds sender \"actor2\" receiver relational event). Optional columns can supplied : `type` `weight`. one exist edgelist, named accordingly. directed logical value indicating whether events directed (TRUE) undirected (FALSE). (default value TRUE) ordinal logical value indicating whether order events matters model (TRUE) also waiting time must considered model (FALSE). (default value FALSE) model can \"tie\" \"actor\" oriented modeling. argument plays fundamental role omit_dyad supplied. Indeed, actor-oriented modeling, dynamic risk set consist two risk sets objects (senders' dyads' risk sets). tie-oriented model function return dynamic risk set referred dyad-level. actors [optional] character vector actors' names may observed interacting network. NULL (default), actors' names taken input edgelist. types [optional] character vector event types may occur network. NULL (default), types' names taken input edgelist. riskset [optional] character value indicating type risk set process: riskset = \"full\" (default) consists possible dyadic events given number actors (number event types) mantains structure time. riskset = \"active\" considers risk observed dyads mantains structure time. riskset = \"manual\", allows risk set structure user-defined, based instructions supplied via argument omit_dyad. type risk set allows time-varying risk set, , instance, subset actors can interact specific time windows, events specific type (sentiment) observed within time intervals defined user. origin [optional] starting time point observaton period (default NULL). supplied, must class `time` column input edgelist. omit_dyad [optional] list lists. list refers one risk set modification must two objects: first object named `time`, vector two values defining first last time point time window apply change risk set second object, named `dyad`, data.frame dyads removed supplied format actor1,actor2,type (row). NA value can used remove multiple objects risk set one risk set modification list (see Details). ncores [optional] number cores used parallelization processing functions. (default 1).","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a Relational Event History — remify","text":"'remify' S3 object, list : number events (`M`), number actors (`N`), number event types (present, `C`), number dyads (`D`, also `activeD` `riskset=\"active\"`), vector inter-event times (waiting times two subsequent events), processed input edgelist `data.frame`, processed `omit_dyad` object `list`. function returns also several attributes make efficient processing data future analysis. details function, input arguments, output, attributes methods, please read vignette(package=\"remify\",topic=\"remify\").","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a Relational Event History — remify","text":"omit_dyad, NA value can used remove multiple objects risk set one risk set modification list. example, remove events sender equal actor “” add list two objects time = c(NA, NA) dyad = data.frame(actor1 = , actor2 = NA, type = NA) omit_dyad list. details ","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/remify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a Relational Event History — remify","text":"","code":"# load package and random network 'randomREH' library(remify) data(randomREH)  # first events in the sequence head(randomREH$edgelist) #>                  time    actor1  actor2        type #> 1 2020-03-05 01:47:08     Kayla Kiffani competition #> 2 2020-03-05 01:50:18    Colton  Justin    conflict #> 3 2020-03-05 02:30:26    Kelsey    Maya cooperation #> 4 2020-03-05 02:38:50 Alexander  Colton competition #> 5 2020-03-05 02:56:16     Wyatt  Kelsey    conflict #> 6 2020-03-05 03:06:45     Derek Breanna competition  # actor's names randomREH$actors #>  [1] \"Crystal\"   \"Colton\"    \"Lexy\"      \"Kelsey\"    \"Michaela\"  \"Zackary\"   #>  [7] \"Richard\"   \"Maya\"      \"Wyatt\"     \"Kiffani\"   \"Alexander\" \"Kayla\"     #> [13] \"Derek\"     \"Justin\"    \"Andrey\"    \"Francesca\" \"Megan\"     \"Mckenna\"   #> [19] \"Charles\"   \"Breanna\"    # event type's names randomREH$types #> [1] \"conflict\"    \"competition\" \"cooperation\"  # start time of the study (origin) randomREH$origin #> [1] \"2020-03-05 01:32:53 UTC\"  # list of changes of the risk set: each one is a list of: # 'time' (indicating the time window where to apply the risk set reduction) # 'dyad' (a data.frame describing the dyads to remove from the risk set  # during the time window specified in 'time') str(randomREH$omit_dyad) #> List of 2 #>  $ :List of 2 #>   ..$ time: POSIXct[1:2], format: \"2020-05-07 20:42:38\" \"2020-05-23 21:46:41\" #>   ..$ dyad:'data.frame':\t1 obs. of  3 variables: #>   .. ..$ actor1: logi NA #>   .. ..$ actor2: logi NA #>   .. ..$ type  : chr \"conflict\" #>  $ :List of 2 #>   ..$ time: POSIXct[1:2], format: \"2020-05-19 23:30:09\" \"2020-05-23 21:46:41\" #>   ..$ dyad:'data.frame':\t4 obs. of  3 variables: #>   .. ..$ actor1: chr [1:4] \"Michaela\" NA \"Zackary\" NA #>   .. ..$ actor2: chr [1:4] NA \"Michaela\" NA \"Zackary\" #>   .. ..$ type  : logi [1:4] NA NA NA NA  # -------------------------------------- # #  processing for tie-oriented modeling  # # -------------------------------------- #  tie_randomREH <- remify(edgelist = randomREH$edgelist,        directed = TRUE,        ordinal = FALSE,        model = \"tie\",        actors = randomREH$actors,        types = randomREH$types,        riskset = \"manual\",        origin = randomREH$origin,        omit_dyad = randomREH$omit_dyad)  # summary summary(tie_randomREH) #> Relational Event Network #> (processed for tie-oriented modeling): #> \t> events = 9915 #> \t> actors = 20 #> \t> (event) types = 3 #> \t> riskset = manual #> \t> directed = TRUE #> \t> ordinal = FALSE #> \t> weighted = FALSE #> \t> time length ~ 80 days #> \t> interevent time  #> \t\t >> minimum ~ 0.0011 seconds #> \t\t >> maximum ~ 5811.4011 seconds  # dimensions of the processed network dim(tie_randomREH) #> events actors  types  dyads  #>   9915     20      3   1140   # Which ID is assigned to the actors with names \"Francesca\" and \"Kayla\"? getActorID(x = tie_randomREH, actorName = c(\"Francesca\",\"Kayla\")) #> [1]  8 10  # Which ID is assigned to the event type \"conflict\"? getTypeID(x = tie_randomREH, typeName = \"conflict\") #> [1] 2  # Find dyad composition (names of actor1, actor2 and type) from the dyad ID: c(1,380,760,1140) getDyad(x = tie_randomREH, dyadID = c(1,380,760,1140)) #>   dyadID    actor1 actor2        type #> 1      1 Alexander Andrey competition #> 2    380   Zackary  Wyatt competition #> 3    760   Zackary  Wyatt    conflict #> 4   1140   Zackary  Wyatt cooperation  # visualize descriptive measures of relational event data # plot(x = tie_randomREH)  # -------------------------------------- # # processing for actor-oriented modeling # # -------------------------------------- #  # loading network 'randomREHsmall' data(randomREHsmall)  # processing small random network actor_randomREH <- remify(edgelist = randomREHsmall$edgelist,        directed = TRUE,        ordinal = FALSE,        model = \"actor\",        actors = randomREHsmall$actors,        origin = randomREHsmall$origin)         # summary summary(actor_randomREH) #> Relational Event Network #> (processed for actor-oriented modeling): #> \t> events = 586 #> \t> actors = 5 #> \t> riskset = full #> \t> directed = TRUE #> \t> ordinal = FALSE #> \t> weighted = FALSE #> \t> time length ~ 80 days #> \t> interevent time  #> \t\t >> minimum ~ 42.1258 seconds #> \t\t >> maximum ~ 85906.6565 seconds  # dimensions of the processed network dim(actor_randomREH) #> events actors  dyads  #>    586      5     20   # ------------------------------------ # # for more information about remify()  # # check: vignette(package=\"remify\")    # # ------------------------------------ #"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/summary.remify.html","id":null,"dir":"Reference","previous_headings":"","what":"summary.remify — summary.remify","title":"summary.remify — summary.remify","text":"function returns easy--read summary main characteristics processed relational event sequence.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/summary.remify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summary.remify — summary.remify","text":"","code":"# S3 method for remify summary(object, ...)"},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/summary.remify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summary.remify — summary.remify","text":"object remify object. ... arguments.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/summary.remify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"summary.remify — summary.remify","text":"prints main characteristics processed relational event sequence.","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/reference/summary.remify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"summary.remify — summary.remify","text":"","code":"# processing the random network 'randomREHsmall' library(remify) data(randomREHsmall) reh <- remify(edgelist = randomREHsmall$edgelist,               model = \"tie\")  # printing a summary of the processed 'remify' object summary(reh) #> Relational Event Network #> (processed for tie-oriented modeling): #> \t> events = 586 #> \t> actors = 5 #> \t> riskset = full #> \t> directed = TRUE #> \t> ordinal = FALSE #> \t> weighted = FALSE #> \t> time length ~ 79 days #> \t> interevent time  #> \t\t >> minimum ~ 1 seconds #> \t\t >> maximum ~ 85906.6565 seconds"},{"path":"https://tilburgnetworkgroup.github.io/remify/news/index.html","id":"remify-326","dir":"Changelog","previous_headings":"","what":"remify 3.2.6","title":"remify 3.2.6","text":"Date: 2024-05-15 Minor fixes implicit conversions remify.h","code":""},{"path":"https://tilburgnetworkgroup.github.io/remify/news/index.html","id":"remify-325","dir":"Changelog","previous_headings":"","what":"remify 3.2.5","title":"remify 3.2.5","text":"CRAN release: 2024-02-05 Date: 2024-02-05 3.2.5 version package. version, events dropped edgelist least one missing value found least one columns: “time”, “actor1”, “actor2”, “type”, “weight”. Bug resolved “ncores > 1” function “getEventComposition()”. Bug correction ‘getDyadID’ method.","code":""}]
